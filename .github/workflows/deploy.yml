name: Deploy Task Manager API

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Permite ejecutar manualmente

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run linting
      run: pnpm run lint

    - name: Build application
      run: pnpm run build

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.IMAGE_NAME }}:latest .
        docker build -t ${{ secrets.IMAGE_NAME }}:${{ github.sha }} .

    - name: Save and transfer Docker image
      run: |
        docker save ${{ secrets.IMAGE_NAME }}:latest | gzip > /tmp/tasks-api-image.tar.gz

        # Transfer image
        scp -i ~/.ssh/deploy_key /tmp/tasks-api-image.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

        # Transfer configuration files
        scp -i ~/.ssh/deploy_key deploy/docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/docker-compose.tasks.yml
        scp -i ~/.ssh/deploy_key deploy/init-mongo.js ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/

    - name: Deploy to server
      run: |
        ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          set -e

          echo 'Loading Docker image...'
          gunzip -c /tmp/tasks-api-image.tar.gz | docker load
          rm /tmp/tasks-api-image.tar.gz

          echo 'Creating MongoDB password secret...'
          if ! docker secret ls | grep -q mongo_password; then
            openssl rand -base64 32 | docker secret create mongo_password -
            echo 'MongoDB password secret created'
          else
            echo 'MongoDB password secret already exists'
          fi

          echo 'Deploying stack...'
          docker stack deploy -c docker-compose.tasks.yml ${{ secrets.STACK_NAME }}

          echo 'Waiting for services to start...'
          sleep 15

          echo 'Checking service status...'
          docker service ls | grep ${{ secrets.STACK_NAME }}

          echo 'Cleaning up old images...'
          docker image prune -f
          docker images | grep '${{ secrets.IMAGE_NAME }}' | grep -v latest | awk '{print \$3}' | head -5 | xargs -r docker rmi || true
        "

    - name: Deployment summary
      run: |
        echo "Deployment completed successfully!"
        echo "Git commit: ${{ github.sha }}"

    - name: Notify on failure
      if: failure()
      run: |
        echo "Deployment failed!"
        echo "Check logs and server status"
        echo "Debug with: ssh -i ~/.ssh/deploy_key SERVER_USER@SERVER_HOST 'docker service logs STACK_NAME_tasks-api -f'"